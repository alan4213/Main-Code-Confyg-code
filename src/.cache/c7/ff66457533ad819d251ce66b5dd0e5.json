{"id":"node_modules/@noble/hashes/ripemd160.js","dependencies":[{"name":"C:\\Users\\alanb\\confyg\\src\\package.json","includedInParent":true,"mtime":1682602329713},{"name":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\package.json","includedInParent":true,"mtime":1682602323037},{"name":"./_sha2.js","loc":{"line":4,"column":27,"index":152},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\ripemd160.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_sha2.js"},{"name":"./utils.js","loc":{"line":5,"column":27,"index":194},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\ripemd160.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@noble/hashes/ripemd160.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}}],"sources":{"node_modules/@noble/hashes/ripemd160.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());\n"},"lineCount":104}},"error":null,"hash":"f1b9cf6055f6cee08116d47ba2c5251f","cacheData":{"env":{}}}