{"id":"node_modules/@noble/hashes/_sha2.js","dependencies":[{"name":"C:\\Users\\alanb\\confyg\\src\\package.json","includedInParent":true,"mtime":1682602329713},{"name":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\package.json","includedInParent":true,"mtime":1682602323037},{"name":"./_assert.js","loc":{"line":4,"column":29,"index":129},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_sha2.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_assert.js"},{"name":"./utils.js","loc":{"line":5,"column":27,"index":173},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_sha2.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@noble/hashes/_sha2.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}}],"sources":{"node_modules/@noble/hashes/_sha2.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"},"lineCount":109}},"error":null,"hash":"54226240ac690ef360f2d9ee598c7be2","cacheData":{"env":{}}}