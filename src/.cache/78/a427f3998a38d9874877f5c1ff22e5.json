{"id":"node_modules/@noble/hashes/scrypt.js","dependencies":[{"name":"C:\\Users\\alanb\\confyg\\src\\package.json","includedInParent":true,"mtime":1682602329713},{"name":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\package.json","includedInParent":true,"mtime":1682602323037},{"name":"./_assert.js","loc":{"line":4,"column":29,"index":153},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\scrypt.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_assert.js"},{"name":"./sha256.js","loc":{"line":5,"column":28,"index":198},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\scrypt.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\sha256.js"},{"name":"./pbkdf2.js","loc":{"line":6,"column":28,"index":242},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\scrypt.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\pbkdf2.js"},{"name":"./utils.js","loc":{"line":7,"column":27,"index":285},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\scrypt.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0, utils_js_1.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    _assert_js_1.default.number(N);\n    _assert_js_1.default.number(r);\n    _assert_js_1.default.number(p);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    _assert_js_1.default.number(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0, utils_js_1.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i) => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0, utils_js_1.asyncLoop)(N, asyncTick, (i) => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@noble/hashes/scrypt.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}}],"sources":{"node_modules/@noble/hashes/scrypt.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0, utils_js_1.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    _assert_js_1.default.number(N);\n    _assert_js_1.default.number(r);\n    _assert_js_1.default.number(p);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    _assert_js_1.default.number(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0, utils_js_1.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i) => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0, utils_js_1.asyncLoop)(N, asyncTick, (i) => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;\n"},"lineCount":223}},"error":null,"hash":"ad16464d0fc17acc23e0d421a0e64e8b","cacheData":{"env":{}}}