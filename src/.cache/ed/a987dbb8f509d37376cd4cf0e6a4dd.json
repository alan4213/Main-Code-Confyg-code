{"id":"node_modules/@noble/hashes/sha3.js","dependencies":[{"name":"C:\\Users\\alanb\\confyg\\src\\package.json","includedInParent":true,"mtime":1682602329713},{"name":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\package.json","includedInParent":true,"mtime":1682602323037},{"name":"./_assert.js","loc":{"line":4,"column":29,"index":347},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\sha3.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_assert.js"},{"name":"./_u64.js","loc":{"line":5,"column":26,"index":390},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\sha3.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_u64.js"},{"name":"./utils.js","loc":{"line":6,"column":27,"index":431},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\sha3.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@noble/hashes/sha3.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}}],"sources":{"node_modules/@noble/hashes/sha3.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n"},"lineCount":211}},"error":null,"hash":"21c5bd58c7f1af5b5fe362ccb0ff72cd","cacheData":{"env":{}}}