{"id":"node_modules/@noble/hashes/pbkdf2.js","dependencies":[{"name":"C:\\Users\\alanb\\confyg\\src\\package.json","includedInParent":true,"mtime":1682602329713},{"name":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\package.json","includedInParent":true,"mtime":1682602323037},{"name":"./_assert.js","loc":{"line":4,"column":29,"index":153},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\pbkdf2.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\_assert.js"},{"name":"./hmac.js","loc":{"line":5,"column":26,"index":196},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\pbkdf2.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\hmac.js"},{"name":"./utils.js","loc":{"line":6,"column":27,"index":237},"parent":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\pbkdf2.js","resolved":"C:\\Users\\alanb\\confyg\\src\\node_modules\\@noble\\hashes\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    _assert_js_1.default.hash(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    _assert_js_1.default.number(c);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@noble/hashes/pbkdf2.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"node_modules/@noble/hashes/pbkdf2.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    _assert_js_1.default.hash(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    _assert_js_1.default.number(c);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n"},"lineCount":91}},"error":null,"hash":"1a3dd2de32981267c646b30c84331f54","cacheData":{"env":{}}}